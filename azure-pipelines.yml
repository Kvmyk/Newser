trigger:
  - main
  - develop

parameters:
  - name: buildImage
    displayName: 'Build Docker Image'
    type: boolean
    default: true
  - name: deployOperation
    displayName: 'Deployment Operation'
    type: string
    default: 'Reinstall'
    values:
      - Install
      - Uninstall
      - Reinstall

variables:
  pythonVersion: '3.12'
  dockerImageName: 'newser-bot'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

stages:
  - stage: Test
    displayName: 'Run Tests'
    jobs:
      - job: RunTests
        displayName: 'Run Tests'
        pool:
          name: 'Default'  # używamy self-hosted agenta
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
              addToPath: true
            displayName: 'Set up Python $(pythonVersion)'

          - script: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt
              pip install black
            displayName: 'Install dependencies'

          - script: |
              pytest
            displayName: 'Run unit tests'

          - script: |
              black --check .
            displayName: 'Run code formatting check with black'
            continueOnError: true

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/test-results.xml'
            condition: succeededOrFailed()
            displayName: 'Publish test results'

  - stage: Build
    displayName: 'Build Docker Image'
    dependsOn: Test
    condition: and(succeeded(), eq('${{ parameters.buildImage }}', true))
    jobs:
      - job: DockerBuild
        displayName: 'Build Docker Image'
        pool:
          name: 'Default'
        steps:
          - task: Docker@2
            inputs:
              command: 'build'
              dockerfile: '$(dockerfilePath)'
              tags: |
                $(tag)
              repository: $(dockerImageName)
            displayName: 'Build Docker Image'
          
          - script: |
              docker tag $(dockerImageName):$(tag) kuba7331/newser-bot:$(tag)
            displayName: 'Tag Docker Image'

          - task: Docker@2
            inputs:
              command: 'push'
              containerRegistry: 'DockerRegistry'
              repository: 'kuba7331/newser-bot'
              tags: |
                $(tag)
            displayName: 'Push Docker Image to Registry'

  - stage: Deploy
    displayName: 'Deploy Application'
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: DeployContainer
        displayName: 'Deploy Container'
        pool:
          name: 'Default'
        steps:
          - task: Bash@3
            displayName: 'Deploy Docker Container'
            inputs:
              targetType: 'inline'
              script: |
                # Logika wdrażania w zależności od wybranej operacji
                if [ "${{ parameters.deployOperation }}" == "Uninstall" ] || [ "${{ parameters.deployOperation }}" == "Reinstall" ]; then
                  echo "Stopping and removing existing container..."
                  docker stop newser-bot || true
                  docker rm newser-bot || true
                fi
                
                if [ "${{ parameters.deployOperation }}" == "Install" ] || [ "${{ parameters.deployOperation }}" == "Reinstall" ]; then
                  echo "Starting new container..."
                  docker run -d --name newser-bot \
                    -e DISCORD_TOKEN=$(DISCORD_TOKEN) \
                    -e NEWSDATA_API_KEY=$(NEWSDATA_API_KEY) \
                    -e GOOGLE_API_KEY=$(GOOGLE_API_KEY) \
                    kuba7331/newser-bot:$(tag)
                fi
            env:
              DISCORD_TOKEN: $(DISCORD_TOKEN)
              NEWSDATA_API_KEY: $(NEWSDATA_API_KEY)
              GOOGLE_API_KEY: $(GOOGLE_API_KEY)
