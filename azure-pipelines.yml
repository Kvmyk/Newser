trigger:
  - main

variables:
  pythonVersion: '3.12'
  imageName: 'newser-discord-bot'

stages:
- stage: Test
  displayName: 'Run Tests'
  jobs:
  - job: TestJob
    displayName: 'Run Pytest'
    pool:
      name: Default # Use your self-hosted agent pool name
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
        addToPath: true
      displayName: 'Use Python $(pythonVersion)'
    
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install dependencies'
    
    - script: |
        python -m pytest tests/ -v
      displayName: 'Run pytest'

- stage: Build
  displayName: 'Build Docker Image'
  dependsOn: Test
  condition: succeeded()
  jobs:
  - job: BuildDocker
    displayName: 'Build Docker Image'
    pool:
      name: Default # Use your self-hosted agent pool name
    steps:
    - task: Docker@2
      displayName: 'Build Docker image'
      inputs:
        command: 'build'
        Dockerfile: 'Dockerfile'
        buildContext: '.'
        tags: |
          $(imageName):$(Build.BuildId)
          $(imageName):latest

- stage: DeployEnvironment
  displayName: 'Create Environment'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: SetupEnvironment
    displayName: 'Setup Runtime Environment'
    pool:
      name: Default # Use your self-hosted agent pool name
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
        addToPath: true
      displayName: 'Use Python $(pythonVersion)'
    
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install dependencies'
    
    - script: |
        echo "Environment is ready for running the Newser bot"
        echo "To run locally: python src/newser.py"
        echo "To run in Docker: docker run $(imageName):latest"
      displayName: 'Environment Info'

    # This step creates a .env file from pipeline variables
    # Configure these secure variables in your Azure DevOps pipeline settings
    - script: |
        echo "DISCORD_TOKEN=$(DISCORD_TOKEN)" > .env
        echo "NEWSDATA_API_KEY=$(NEWSDATA_API_KEY)" >> .env
        echo "GOOGLE_API_KEY=$(GOOGLE_API_KEY)" >> .env
      displayName: 'Create .env file'
      # Set condition to true once you add these variables to your pipeline
      condition: false